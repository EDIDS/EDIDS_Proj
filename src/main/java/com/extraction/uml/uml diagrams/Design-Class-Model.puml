@startuml

title Design Class Model

abstract class Alien  {
    {abstract} attack() : int
    {abstract} takeDamage(damage:int)
    {abstract} getEscapeChance() : double
    {abstract} getEludeChance() : double
}

class Clicker {
    name_ : String
    health_ : int
    attack_ : int
    attack() : int
    takeDamage(damage:int)
    getEscapeChance() : double
    getEludeChance() : double
}

class Runner {
    name_ : String
    health_ : int
    attack_ : int
    attack() : int
    takeDamage(damage:int)
    getEscapeChance() : double
    getEludeChance() : double
}

class Shambler {
    name_ : String
    health_ : int
    attack_ : int
    attack() : int
    takeDamage(damage:int)
    getEscapeChance() : double
    getEludeChance() : double
}

class Game {
    bHandler : ButtonsHandler
    ui : UI
    vm : VisibilityManager
    building : Building
    player : Player
    story : Story
    newGame()
    loadGame()
}

class ButtonsHandler {
    actionPerformed(e:ActionEvent)
}

class LoadHandler {
    actionPerformed(e:ActionEvent)
}

class Story {
    game : Game
    ui : UI
    vm : VisibilityManager
    player : Player
    building : Building
    defaultSetup()
    setNextPosition(next1:String, next2:String, next3:String, next4:String)
    selectPosition(nextPosition:String)
    map()
    updatePlayerPos()
    proceed()
    checkRoom()
    showItems()
    exitItems()
    throwItems()
    exitThrow()
    getItems() : StringBuilder
    execute(item:String)
    room(nextRow:int, nextColumn:int)
    showDialog(text:String, buttonText:String, actionCommand:String)
    lightOn()
    fightAlien(alien:Alien)
}

class EndingDialog {
    dialogues : List<String>
    iterator : Iterator<String>
    initializeDialogues()
    nextDialogue() : String
}

class IntroductionDialog {
    dialogues : List<String>
    iterator : Iterator<String>
    initializeDialogues()
    nextDialogue() : String
}

class UI {
    bHandler : ButtonsHandler
    homeScreen(gameTitle:String)
    gameScreen()
    newMap()
}

class VisibilityManager {
    ui : UI
    everythingNotVisible()
    showHomeScreen()
    showLoadScreen()
    showMapScreen()
    showDialogScreen()
    showTextScreen()
    showFightScreen()
    showEndScreen()
    showMessage()
}

class Item {
}

class Key {
    name : String
    weight : double
    throwable : boolean
}

class MedKit{
    name : String
    weight : double
    throwable : boolean
}

class Shield {
    name : String
    weight : double
    throwable : boolean
    getDefense() : int
}

class TNT {
    name : String
    weight : double
    throwable : boolean
    getDamage() : int
}

class Torch {
    name : String
    weight : double
    throwable : boolean
    isOn : boolean
    turnOn()
    turnOff()
}

class Weapon {
    name : String
    weight : double
    throwable : boolean
    type_ : String
    minDamage_ : int
    maxDamage_ : int
    calculateDamage() : int
}

class Building {
    rooms : Map<String, Room>
    addRoom(room:Room)
    getRoom(coordinate:String) : Room
    removeRoom(coordinate:String)
    getRooms() : List<Room>
    getAvailableDirections(room:Room) : String
}
 
class Room {
    coordinate : Coordinate
    title : String
    description : String
    iconPath : String
    alien=null : Alien
    is_closed=false : boolean
    items : list<Item>
    is_dark=false : boolean
    addItem(item:Item)
    removeItem(itemToThrow:String)
    removeItem(itemToThrow:Item)
    findItem(itemToFind:String)
    findItem(itemToFind:Item)
    close()
    open()
}

class Coordinate {
    column : int
    row : int
    equals(o:Object) : boolean
    toString() : String
}

class Fight {
    player : Player
    alien : ALien
    ui : UI
    story : Story
    vm : VisibilityManager
    fight()
    playerTurn()
    alienTurn()
    attack()
    run()
    heal()
    tnt()
    defend()
    elude()
    displayStatus()
}

class Player {
    health_ : int
    name_ : String
    bag_ : List<Item>
    currentWeight_=0 : double
    currentRoom_ : Room
    weapon=null : Weapon
    shield=null : Shield
    score_=0 : int
    numKeys = int
    vm : VisibilityManager
    attack() : int
    defend() : int
    heal() : boolean
    takeDamage(damage:int)
    addItem(item:Item)
    throwItem(itemToThrow:Item)
    throwItem(itemToThrow:String)
    findItem(itemToFind:Item)
    findItem(itemToFind:String)
    detonateTNT(int)
    getData() : String
    reset()
}

class AlienTypeAdapter {
    Serialize(alien:Alien, type:Type, context:JsonSerializationContext)
    Deserialize(jsonElement:JsonElement, type:Type, context:JsonSerializationContext)
}

class BuildingTypeAdapter {
    Serialize(building:Building, type:Type, context:JsonSerializationContext)
    Deserialize(jsonElement:JsonElement, type:Type, context:JsonSerializationContext)
}

class GameSaveTypeAdapter {
    Serialize(gameSave:GameSave, type:Type, context:JsonSerializationContext)
    Deserialize(jsonElement:JsonElement, type:Type, context:JsonSerializationContext)
}

class ItemTypeAdapter {
    Serialize(item:Item, type:Type, context:JsonSerializationContext)
    Deserialize(jsonElement:JsonElement, type:Type, context:JsonSerializationContext)
}

class PlayerTypeAdapter {
    Serialize(player:Player, type:Type, context:JsonSerializationContext)
    Deserialize(jsonElement:JsonElement, type:Type, context:JsonSerializationContext)
}

class RoomTypeAdapter {
    Serialize(room:Room, type:Type, context:JsonSerializationContext)
    Deserialize(jsonElement:JsonElement, type:Type, context:JsonSerializationContext)
}

class AwsConfigReader {
    readAwsCredentials(profile:String) : Map<String, String>
}

class GameSave {
    building : Building
    playerdata : Player
}

class S3Uploader {
    bucketName : String
    s3Client : AmazonS3
    gson : Gson
    uploadDirectory(directoryPath:String)
    saveGame(player:Player, building:Building)
    downloadAllGames()
    getMaxSaveNumberFromS3() : int
}

Alien <|-- Clicker : extends
Alien <|-- Runner : extends
Alien <|-- Shambler : extends

Fight"1" --> "1"Player : is fought by
Fight"1" --> "1"Alien : is fought by
Fight"1" --> "1"UI : is displayed by
Fight"1" --> "1"Story : operates on
Fight"1" --> "1"VisibilityManager : is displayed by

Item <|-- Key : extends
Item <|-- MedKit : extends
Item <|-- Shield : extends
Item <|-- TNT : extends
Item <|-- Torch : extends
Item <|-- Weapon : extends

Building"1" o-- "13"Room : are contained

Player"1" --> "1"Weapon : wields
Player"1" --> "1"Shield : holds
Player"1" --> "*"Item : holds
Player"1" --> "1"Room : is in
Player"1" --> "1"VisibilityManager : is displayed

Room"1" --> "*"Item : keeps
Room"1" --> "0..1"Alien : keeps
Room"1" --> "1"Coordinate : is described by

S3Uploader"1" ..> "1"AwsConfigReader : uses
S3Uploader ..> GameSave : uploads
GameSave"1" --> "1"Building : saves
GameSave"1" --> "1"Player : saves

Game *-- ButtonsHandler : belongs to
Game *-- LoadHandler : belongs to
Game"1" --> "1"UI : is displayed by
Game"1" --> "1"VisibilityManager : is displayed by
Game"1" --> "1"Building : creates
Game"1" --> "1"Player : instantiates
Game"1" --> "1"Story : operates
Game"1" --> "1"GameSave : loads

VisibilityManager"1" --> "1"UI : operates through
UI"1" --> "1"ButtonsHandler : uses

Story"1" --> "1"IntroductionDialog : uses
Story"1" --> "1"EndingDialog : uses
Story"1" --> "1"VisibilityManager : is displayed by
Story"1" --> "1"UI : is displayed by
Story"1" --> "1"Player : operates
Story"1" --> "*"Fight : operates
Story"1" --> "0..13"Room : operates

AlienTypeAdapter"1" <.. "1"RoomTypeAdapter : uses
RoomTypeAdapter"1" <.. "1"BuildingTypeAdapter : uses
RoomTypeAdapter"1" <.. "1"PlayerTypeAdapter : uses
ItemTypeAdapter"1" <.. "1"RoomTypeAdapter :uses
ItemTypeAdapter"1" <.. "1"PlayerTypeAdapter : uses
PlayerTypeAdapter"1" <.. "1"GameSaveTypeAdapter : uses
BuildingTypeAdapter"1" <.. "1"GameSaveTypeAdapter : uses
GameSaveTypeAdapter"1" <.. "1"Game : uses
GameSaveTypeAdapter"1" <-- "1"S3Uploader : uses

AlienTypeAdapter ..> Alien : serializes
RoomTypeAdapter ..> Room : serializes
ItemTypeAdapter ..> Item : serializes
PlayerTypeAdapter ..> Player : serializes
BuildingTypeAdapter ..> Building : serializes
GameSaveTypeAdapter ..> GameSave : serializes

@enduml