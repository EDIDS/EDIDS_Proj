User Story 1 :
    "As a player, I want to be able to move to adjacent rooms, so that I can explore the map."
Acceptance Criteria :
    1) Display possible directions (North, South, East, West)
    2) Check chosen direction
    3) Display error message if inaccessible direction (e.g. "Path Closed")
    4) Update player's position if accessible direction (increase or decrease coordinate)
    5) Display new Room if accessible direction


User Story 2 :
    "As a player, I want to be able to pick up found items, so that I can use them."
Acceptance Criteria :
    1) Create bag to contain item (e.g. List<item>)
    2) Set max weight the bag can endure (e.g. 100)
    3) Keep track of the bag's current weight
    4) Get the requested item's weight (e.g. 10)
    5) Add the item to the bag if the item's weight is less than the current free weight (e.g. bag's current weight <= 90)
    6) Return error message otherwise (e.g. "Bag is already full")


User Story 3 :
    "As a player, I want to be able to fight with encountered enemies, so that I can raise my score."
Acceptance Criteria :
    1) Display possible actions (e.g. Attack, Defend, Elude, Cure, Run)
    2) Check chosen action
    3) If choice is attack, get player's attack and decrease enemy's health by that value
        (e.g. attack = 30 -> alien's health 50 => 20)
    4) If choice is defend, decrease enemy's attack by player's defense and decrease player's health by that value
        (e.g. alien's attack = 20, defense = 10 -> health 100 => 90)
    5) If choice is elude, get the percentage of eluding that enemy and a random number between 0 and 1 and decrease
        player's health by enemy's attack only if the number is greater than the percentage
        (e.g. percentage = 0.7, random number = 0.6 -> nothing happens)
    6) If choice is cure, search the bag for a medikit and if the research ends successfully set player's health to its
        maximum value, otherwise display error message (e.g. "No medikit found")
    7) If choice is run, get the percentage of running away from that enemy and a random number between 0 and 1 and end
        the fight only if the number is smaller than the percentage (e.g. percentage = 0.7, random number = 0.6 -> fight ends)
    8) End game if player's health reaches 0 (Game Over)
    9) Resume game if enemy's health reaches 0 (Enemy defeated)
    10) Compute score based on fight's data and update player's score


User Story 4 :
    "As a player, I want to be able to save the game's state, so that I can reuse it later"
Acceptance Criteria:
    1) Display save button
    2) Gather game's information (e.g. Player's and Building's data)
    3)

User Story 5 :
    "As a player, I want to be able to load previous games, so that I can restart playing them"
Acceptance Criteria:
    1) Display load button
    2)